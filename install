#!/usr/bin/env bash

shopt -s expand_aliases
set -e

# set up command line parsing via getopts
# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [-cd]
Install the Jupyter.app

    -h    Display this help and exit.
    -d    Dry run. For debug purposes, echo commands instead of running them.
EOF
}

# if set to -d, perform a dryrun
dryrun=

# for internal dev purposes.
devmode=

OPTIND=1
# Resetting OPTIND is necessary if getopts was used previously in the script.
# It is a good idea to make OPTIND local if you process options in a function.

while getopts hdtr opt; do
    case $opt in
        h)  show_help
            exit 0
            ;;
        d)  dryrun=-d
            ;;
        t)  devmode=-t
            ;;
        *)  show_help >&2
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))"   # Discard the options and sentinel --

# define the dryrun echo command as appropriate
alias dryecho=
if [ "$dryrun" = "-d" ]; then
    alias dryecho='echo'
fi

# read a single string val from a .plist file
plget() {
    key=$1
    pth=$2

    dryecho plutil -extract $1 xml1 -o - $pth | grep "<string>.*</string>" | sed -e "s/<string>\(.*\)<\/string>/\1/g"
}

# helper function(s)
sedvar() {
    fname=$1
    shift 1

    for var in $@; do
        # the \$[{]* ... [}]* part will match vars with or without curly braces
        dryecho sed -i '' "s#\$[{]*$var[}]*#${!var}#g" ${fname}
    done
}

# replace the value for a key in a .strings file
sedStringsFile() {
    key=$1
    val=$2
    shift 2

    for pth in $@; do
        dryecho sed -i '' "s/${key}.*/${key} = \"${val}\";/g" ${pth}
    done
}


# get some user-defined and project-wide vars
reldir=$(dirname "$(stat -f "$0")")
globals_src="${reldir}"/resource/globals
source ${globals_src}


# make a temporary dir
temp=$TMPDIR$(uuidgen)
dryecho mkdir -p "${temp}/mount"


# figure out what the download's extension will be
if [ "${APP_BASE}" = "chromium" ]; then
    downloadExt=".zip"
else
    downloadExt=".dmg"
fi


# decide where to save the chrome app download
if [ "$devmode" = "-t" ]; then
    downloadName="./${APP_BASE}"
else
    downloadName="${temp}/${APP_BASE}"
fi
downloadPath="${downloadName}${downloadExt}"


# download the app
if ! [ "$devmode" = "-t" -a -f ${downloadPath} ]; then
    "${reldir}"/script/download/${APP_BASE}.sh $downloadPath $dryrun
fi


# clean up any existing app
if [ -e "${ABS_APP_PATH}" ]; then
    printf "cleaning up existing app...\n"
    dryecho rm -rf "${ABS_APP_PATH}"
    printf "removed ${ABS_APP_PATH}\n\n"
fi


# install the app. Use cp -R to preserve symlinks
printf "installing base browser app...\n"
if [ "$downloadExt" = ".zip" ]; then
    # existing unzip dir can cause problems, get rid of it
    dryecho rm -rf ${downloadName}
    if [ "$dryrun" = "-d" ]; then
        # special dryrun handling is required here due to the > and | characters
        dryecho unzip ${downloadPath} -d ${downloadName} \> /dev/null 2\>\&1
        appDownloadPath="Chromium.app"
        dryecho mv "${appDownloadPath}" "${ABS_APP_PATH}"
        dryecho rm -rf ${downloadName}
    else
        unzip ${downloadPath} -d ${downloadName} > /dev/null 2>&1
        appDownloadPath=$(find ${downloadName} -name "Chromium.app" | head -n 1)
        mv "${appDownloadPath}" "${ABS_APP_PATH}"
        rm -rf ${downloadName}
    fi
else
    # for now assume this is a .dmg
    if [ "$dryrun" = "-d" ]; then
        # special dryrun handling is required here due to all of the > and | characters
        dryecho yes \| hdiutil attach -noverify -nobrowse -mountpoint "${temp}/mount" ${downloadPath} \> /dev/null 2\>\&1
        dryecho rm -rf "${ABS_APP_PATH}"
        dryecho cp -R "$temp"/mount/*.app "${ABS_APP_PATH}"
        dryecho hdiutil detach "${temp}/mount" \> /dev/null 2\>\&1
    else
        yes | hdiutil attach -noverify -nobrowse -mountpoint "${temp}/mount" ${downloadPath} > /dev/null 2>&1
        rm -rf "${ABS_APP_PATH}"
        cp -R "$temp"/mount/*.app "${ABS_APP_PATH}"
        hdiutil detach "${temp}/mount" > /dev/null 2>&1
    fi
fi
printf "done\n\n"


# clean up the temp dir
printf "cleaning up base browser install files...\n"
dryecho rm -r "${temp}"
printf "done\n\n"


# change the icon
printf "changing app icon to jupyter...\n"
dryecho cp "${ABS_ICONS_SRC}" "${ABS_ICONS}"
printf "done\n\n"


# rename the actual exe
printf "renaming app executable...\n"
dryecho mv "${ABS_APP_BIN_SRC}" "${ABS_APP_BIN}"
printf "done\n\n"


# copy over the outer wrapper script, which handles the terminal window
printf "copying outer wrapper script over to app...\n"
dryecho cp "${ABS_OUTER_WRAP_SRC}" "${ABS_OUTER_WRAP}"
printf "setting vars in outer wrapper script...\n"
sedvar "${ABS_OUTER_WRAP}" TERM_NAME ABS_MID_WRAP
printf "done\n\n"


# copy over the mid wrapper script, which launches the jupyter server
printf "copying mid wrapper script over to app...\n"
dryecho cp "${ABS_MID_WRAP_SRC}" "${ABS_MID_WRAP}"
printf "setting vars in mid wrapper script...\n"
sedvar "${ABS_MID_WRAP}" VIRTUAL_ENV JUPYTER_BIN JUPYTER_CMD JUPYTER_NOTEBOOK_DIR ABS_INNER_WRAP BROWSER_CMD
printf "done\n\n"


# copy over the inner wrapper script, which automatically passes certain arguments to the chrome bin
printf "copying inner wrapper script over to app...\n"
dryecho cp "${ABS_INNER_WRAP_SRC}" "${ABS_INNER_WRAP}"
printf "setting vars in inner wrapper script...\n"
sedvar "${ABS_INNER_WRAP}" ABS_APP_SUPPORT_PATH ABS_APP_BIN
printf "done\n\n"


# modify the app's plist's exe to point to the script we just copied over
printf "Modifying app's Info.plist to point to executable scripts...\n"
dryecho plutil -replace CFBundleExecutable -string "${APP_NAME}" "${ABS_CONTENTS}/Info.plist"
printf "done\n\n"


# modify the app's plist's bundle name
printf "Modifying app's Info.plist...\n"
dryecho plutil -replace CFBundleDisplayName -string "${APP_NAME}"  "${ABS_CONTENTS}/Info.plist"
dryecho plutil -replace CFBundleIdentifier  -string "${BUNDLE_ID}" "${ABS_CONTENTS}/Info.plist"
dryecho plutil -replace CFBundleName        -string "${APP_NAME}"  "${ABS_CONTENTS}/Info.plist"
dryecho plutil -replace KSBrandID           -string "${BRAND_ID}"  "${ABS_CONTENTS}/Info.plist"
dryecho plutil -replace KSProductID         -string "${BUNDLE_ID}" "${ABS_CONTENTS}/Info.plist"
printf "done\n\n"


# modify the localization strings. Fixes visible name in finder
printf "Modifying app's localized .strings resources...\n"
dryecho INFO_PLIST_STRINGS=$(find "${ABS_RESOURCES}" -name "InfoPlist.strings")
dryecho sedStringsFile CFBundleDisplayName "${APP_NAME}" ${INFO_PLIST_STRINGS}
dryecho sedStringsFile CFBundleName "${APP_NAME}" ${INFO_PLIST_STRINGS}
printf "done\n\n"


# optionally install any extension manifests to the new Chrome instance's 'Application Support' dir
if [ "$EXTENSIONS" = true ]; then
    printf "Adding extension manifests to \"${ABS_EXTENSION_JSON}\"...\n"
    # create the External Extensions dir if it doesn't exist
    dryecho mkdir -p "${ABS_EXTENSION_JSON}"
    for extjson in ${ABS_EXTENSION_JSON_SRC}; do
        dryecho cp "${extjson}" "${ABS_EXTENSION_JSON}"
    done
    printf "done\n\n"
fi
