#!/usr/bin/env bash

# This mid wrapper is installed alongside the outer wrapper.
# Its job is to set up the virtual env (if specified), then run the actual `jupyter notebook/lab` command.

virtual_env="${VIRTUAL_ENV}"
jupyter_bin="${JUPYTER_BIN}"
jupyter_cmd="${JUPYTER_CMD}"
inner_wrap="${ABS_INNER_WRAP}"
notebook_dir="${JUPYTER_NOTEBOOK_DIR}"
browser_cmd="${BROWSER_CMD}"

# get jupyter_cmd from env var, if defined
if [ -n "${JUPYTERAPP_JUPYTER_CMD}" ]; then
    jupyter_cmd="${JUPYTERAPP_JUPYTER_CMD}"
fi

# source the virtual env activate script, if specified
if [ -n "$virtual_env" ]; then
    source ${virtual_env}
fi

# prestart the browser and get its pid
${inner_wrap} --no-startup-window &

APP_PID=$!

# --browser gets passed along to the `webbrowser` module.
# The "%s" in browser_cmd get substituted with the jupyter url.
# See jupyter/notebook/notebook/notebookapp.py:1732
jupyter_bin=$(which "${jupyter_bin}")
${jupyter_bin} ${jupyter_cmd} --notebook-dir=${notebook_dir} --browser="${inner_wrap} ${browser_cmd}" &

JUPYTER_PID=$!
trap "kill -s SIGTERM $JUPYTER_PID; wait $JUPYTER_PID; exit" SIGINT

# wait for the browser to die
wait $APP_PID

# kill any children of the jupyter server
pkill -P $JUPYTER_PID

# kill the jupyter server itself
kill -s SIGTERM $JUPYTER_PID

# wait for the server to die and then exit
wait $JUPYTER_PID
